// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace KiotaPosts.Client.V1.Public.Creators.Item.Comics {
    /// <summary>
    /// Builds and executes requests for operations under \v1\public\creators\{creatorId}\comics
    /// </summary>
    public class ComicsRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new ComicsRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ComicsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/public/creators/{creatorId}/comics{?format*,formatType*,noVariants*,dateDescriptor*,dateRange*,title*,titleStartsWith*,startYear*,issueNumber*,diamondCode*,digitalId*,upc*,isbn*,ean*,issn*,hasDigitalIssue*,modifiedSince*,characters*,series*,events*,stories*,sharedAppearances*,collaborators*,orderBy*,limit*,offset*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new ComicsRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ComicsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/public/creators/{creatorId}/comics{?format*,formatType*,noVariants*,dateDescriptor*,dateRange*,title*,titleStartsWith*,startYear*,issueNumber*,diamondCode*,digitalId*,upc*,isbn*,ean*,issn*,hasDigitalIssue*,modifiedSince*,characters*,series*,events*,stories*,sharedAppearances*,collaborators*,orderBy*,limit*,offset*}", rawUrl) {
        }
        /// <summary>
        /// Fetches lists of comics in which the work of a specific creator appears, with optional filters. See notes on individual parameters below.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<ComicsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<ComicsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Fetches lists of comics in which the work of a specific creator appears, with optional filters. See notes on individual parameters below.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<ComicsRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<ComicsRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/octet-stream");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ComicsRequestBuilder WithUrl(string rawUrl) {
            return new ComicsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Fetches lists of comics in which the work of a specific creator appears, with optional filters. See notes on individual parameters below.
        /// </summary>
        public class ComicsRequestBuilderGetQueryParameters {
            /// <summary>Return only comics which feature the specified characters (accepts a comma-separated list of ids).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("characters")]
            public int?[]? Characters { get; set; }
#nullable restore
#else
            [QueryParameter("characters")]
            public int?[] Characters { get; set; }
#endif
            /// <summary>Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("collaborators")]
            public int?[]? Collaborators { get; set; }
#nullable restore
#else
            [QueryParameter("collaborators")]
            public int?[] Collaborators { get; set; }
#endif
            /// <summary>Return comics within a predefined date range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dateDescriptor")]
            public string? DateDescriptor { get; set; }
#nullable restore
#else
            [QueryParameter("dateDescriptor")]
            public string DateDescriptor { get; set; }
#endif
            /// <summary>Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("dateRange")]
            public int?[]? DateRange { get; set; }
#nullable restore
#else
            [QueryParameter("dateRange")]
            public int?[] DateRange { get; set; }
#endif
            /// <summary>Filter by diamond code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("diamondCode")]
            public string? DiamondCode { get; set; }
#nullable restore
#else
            [QueryParameter("diamondCode")]
            public string DiamondCode { get; set; }
#endif
            /// <summary>Filter by digital comic id.</summary>
            [QueryParameter("digitalId")]
            public int? DigitalId { get; set; }
            /// <summary>Filter by EAN.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("ean")]
            public string? Ean { get; set; }
#nullable restore
#else
            [QueryParameter("ean")]
            public string Ean { get; set; }
#endif
            /// <summary>Return only comics which take place in the specified events (accepts a comma-separated list of ids).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("events")]
            public int?[]? Events { get; set; }
#nullable restore
#else
            [QueryParameter("events")]
            public int?[] Events { get; set; }
#endif
            /// <summary>Filter by the issue format (e.g. comic, digital comic, hardcover).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("format")]
            public string? Format { get; set; }
#nullable restore
#else
            [QueryParameter("format")]
            public string Format { get; set; }
#endif
            /// <summary>Filter by the issue format type (comic or collection).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("formatType")]
            public string? FormatType { get; set; }
#nullable restore
#else
            [QueryParameter("formatType")]
            public string FormatType { get; set; }
#endif
            /// <summary>Include only results which are available digitally.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("hasDigitalIssue")]
            public bool?[]? HasDigitalIssue { get; set; }
#nullable restore
#else
            [QueryParameter("hasDigitalIssue")]
            public bool?[] HasDigitalIssue { get; set; }
#endif
            /// <summary>Filter by ISBN.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("isbn")]
            public string? Isbn { get; set; }
#nullable restore
#else
            [QueryParameter("isbn")]
            public string Isbn { get; set; }
#endif
            /// <summary>Filter by ISSN.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("issn")]
            public string? Issn { get; set; }
#nullable restore
#else
            [QueryParameter("issn")]
            public string Issn { get; set; }
#endif
            /// <summary>Return only issues in series whose issue number matches the input.</summary>
            [QueryParameter("issueNumber")]
            public int? IssueNumber { get; set; }
            /// <summary>Limit the result set to the specified number of resources.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Return only comics which have been modified since the specified date.</summary>
            [QueryParameter("modifiedSince")]
            public Date? ModifiedSince { get; set; }
            /// <summary>Exclude variant comics from the result set.</summary>
            [QueryParameter("noVariants")]
            public bool? NoVariants { get; set; }
            /// <summary>Skip the specified number of resources in the result set.</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>Order the result set by a field or fields. Add a &quot;-&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("orderBy")]
            public string[]? OrderBy { get; set; }
#nullable restore
#else
            [QueryParameter("orderBy")]
            public string[] OrderBy { get; set; }
#endif
            /// <summary>Return only comics which are part of the specified series (accepts a comma-separated list of ids).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("series")]
            public int?[]? Series { get; set; }
#nullable restore
#else
            [QueryParameter("series")]
            public int?[] Series { get; set; }
#endif
            /// <summary>Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sharedAppearances")]
            public int?[]? SharedAppearances { get; set; }
#nullable restore
#else
            [QueryParameter("sharedAppearances")]
            public int?[] SharedAppearances { get; set; }
#endif
            /// <summary>Return only issues in series whose start year matches the input.</summary>
            [QueryParameter("startYear")]
            public int? StartYear { get; set; }
            /// <summary>Return only comics which contain the specified stories (accepts a comma-separated list of ids).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("stories")]
            public int?[]? Stories { get; set; }
#nullable restore
#else
            [QueryParameter("stories")]
            public int?[] Stories { get; set; }
#endif
            /// <summary>Return only issues in series whose title matches the input.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("title")]
            public string? Title { get; set; }
#nullable restore
#else
            [QueryParameter("title")]
            public string Title { get; set; }
#endif
            /// <summary>Return only issues in series whose title starts with the input.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("titleStartsWith")]
            public string? TitleStartsWith { get; set; }
#nullable restore
#else
            [QueryParameter("titleStartsWith")]
            public string TitleStartsWith { get; set; }
#endif
            /// <summary>Filter by UPC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("upc")]
            public string? Upc { get; set; }
#nullable restore
#else
            [QueryParameter("upc")]
            public string Upc { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class ComicsRequestBuilderGetRequestConfiguration : RequestConfiguration<ComicsRequestBuilderGetQueryParameters> {
        }
    }
}
